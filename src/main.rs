use rand::Rng;

fn main() {
    /*
     * ## 注释和文档
     *
     * 在 Rust 中，注释分为三类：
     * - 代码注释，用于说明某一块代码的功能，读者往往是同一个项目的协作开发者
     * - 文档注释，支持 Markdown，对项目描述、公共 API 等用户关心的功能进行介绍，同时还能提供示例代码，目标读者往往是想要了解你项目的人
     * - 包和模块注释，严格来说这也是文档注释中的一种，它主要用于说明当前包和模块的功能，方便用户迅速了解一个项目
     *
     * ### 1. 代码注释
     * 代码注释和其他语言类似，具体分为两种行注释和块注释：
     * - 行注释：可以放在某一行代码的上方，也可以放在当前代码行的后方 `//`
     * - 块注释：当注释行数较多时，可以使用块注释 ```/\*\*\/```
     *
     * ### 2. 文档注释
     * 当查看一个 crates.io 上的包提供的文档来浏览相关的功能特性、使用方式，这种文档就是通过文档注释实现的。
     * Rust 提供了 cargo doc 的命令，可以用于把这些文档注释转换成 HTML 网页文件，最终展示给用户浏览，这样用户就知道这个包是做什么的以及该如何使用。
     *
     * 与代码注释相同，文档注释也分为行注释和块注释：
     * - 文档行注释，用三个斜杠描述 ///
     * - 文档块注释，用 /\*\* \*\/ 描述
     *
     * 文档注释需要注意几点：
     * 1. 文档注释需要位于 `lib` 类型的包中，例如 `src/lib.rs` 中
     * 2. 文档注释可以使用 `markdown` 语法！例如 `# Examples` 的标题，以及代码块高亮
     * 3. 被注释的对象需要使用 `pub` 对外可见，记住：文档注释是给用户看的，内部实现细节不应该被暴露出去
     *
     * ### 3. 包和模块级别的注释
     * 除了函数、结构体等 Rust 项的注释，还可以给包和模块添加注释，需要注意的是，这些注释要添加到包、模块的最上方！
     * 包模块注释，可以让用户从整体的角度理解包的用途，让用户在看的时候心中有数。
     *
     * 与之前的任何注释一样，包级别的注释也分为两种：
     * - 行注释 \/\/!
     * 块注释 /\*! ... \*\/
     *
     * ### 4. 查看文档 cargo doc
     * 运行 `cargo doc` 可以直接生成 `HTML` 文件，放在 `target/doc` 目录下。为了方便，可以使用 `cargo doc --open` 命令，可以在生成文档后，自动在浏览器中打开网页。
     *
     * #### 常用文档标题
     * 除了 `# Examples`，一些常用的标题可以在项目中酌情使用，这些标题更多的是一种惯例：
     * - Panics：函数可能会出现的异常状况，这样调用函数的人就可以提前规避
     * - Errors：描述可能出现的错误及什么情况会导致错误，有助于调用者针对不同的错误采取不同的处理方式
     * - Safety：如果函数使用 unsafe 代码，那么调用者就需要注意一些使用条件，以确保 unsafe 代码块的正常工作
     *
     * ### 5. 文档测试(Doc Test)
     *
     */

    /// # Example
    /// 这是一段运行的例子
    /// ```rs
    /// let arg = 5;
    /// ```
    let a = 1;

    /** `add_two` 将指定值加2
     ```
    let arg = 5;
    let answer = my_crate::add_two(arg);
    assert_eq!(7, answer);
    ```
    */
    pub fn add_two(x: i32) -> i32 {
        x + 2
    }
}
